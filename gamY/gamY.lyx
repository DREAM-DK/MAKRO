#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass report
\begin_preamble
\usepackage{xcolor}
\usepackage{graphicx}
\usepackage{geometry}
\geometry{verbose,tmargin=3cm,bmargin=3cm,lmargin=2cm,rmargin=2cm, headheight=3cm, footskip=1cm}
\usepackage{fancyhdr}
%\pagestyle{fancy}


\newcommand{\logo}{MAKRO_logo_500.png}

\definecolor{darkblue}{HTML}{0F2D40} 

\renewcommand{\headrulewidth}{0pt} % Remove fancy header line

\fancyhead[L]{}
%\fancyhead[C]{}
%\fancyhead[C]{\includegraphics[width=2cm]{\logo}\vspace{0.5cm}}
\fancyhead[R]{}

\makeatletter\let\ps@plain\ps@fancy\makeatother  % Also use header on first page

%\setcitestyle{round}

\usepackage{amsmath}
\numberwithin{figure}{subsection}
\numberwithin{table}{subsection}

\renewcommand{\figurename}{Figur}
\renewcommand{\tablename}{Tabel}

\usepackage{chngcntr}
\counterwithout{equation}{section}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
enumitem
\end_modules
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "berasans" "Arial"
\font_typewriter "beramono" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 0
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation 0bp
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 1
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
gamY - Documentation
\end_layout

\begin_layout Author

\lang danish
Martin Kirk Bonde
\end_layout

\begin_layout Date

\lang danish
January 2022
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Section
Introduction
\end_layout

\begin_layout Plain Layout
gamY is a pre-processor for GAMS and implements additional features that
 are convenient for working with large models.
 The documentation assumes basic familiarity with GAMS.
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tableofcontents
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Standard
gamY requires an installation of GAMS to be useful.
\end_layout

\begin_layout Standard
gamY comes with an executable, gamY.exe, which does not require any further
 installation.
 It can also be run as a python script which simply requires a python installati
on.
\end_layout

\begin_layout Section
Running gamY
\end_layout

\begin_layout Standard
gamY can be used together with the GAMS-Python-API to run GAMS jobs directly
 from Python, or it can be run as a script run from a terminal, for example
 in a Windows .cmd file as shown in the box below.
\end_layout

\begin_layout Standard
When run as a script, gamY does 2 things:
\end_layout

\begin_layout Enumerate
gamY processes the input file, expanding all gamY commands, and outputs
 a file with plain GAMS code.
 To distinguish the input file and the expanded output file we use the extension
 .gmy for the expanded file and put it in a sub-directory called 
\emph on
'Expanded'
\emph default
.
 The expanded .gmy file can be very verbose and should only be looked at
 for debugging purposes or to gain a better understanding of how gamY works
 behind the scenes.
\end_layout

\begin_layout Enumerate
gamY opens GAMS and tells it to execute the expanded GAMS file.
\end_layout

\begin_layout Standard
GAMS' save and restart feature can also be used with gamY (as shown in the
 box below).
 In that case, gamY automatically produces and reads a .pkl file containing
 metadata.
\end_layout

\begin_layout Subsubsection
Running gamY from .cmd file
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code
set gamY=
\color red
Q:
\backslash
gamY
\backslash
gamY.exe
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
:: Run a .gms file using gamY
\end_layout

\begin_layout LyX-Code
%gamY% test.gms
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
:: Run multiple .gms files with gamY using the GAMS save and restart feature
\end_layout

\begin_layout LyX-Code
%gamY% a.gms s=a
\end_layout

\begin_layout LyX-Code
%gamY% b.gms r=a s=b
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
To work offline, copy the gamY 
\emph on
executable 
\begin_inset Quotes xld
\end_inset

Q:
\backslash
gamY
\emph default

\backslash
gamY.exe
\begin_inset Quotes xrd
\end_inset

 to your local project and replace 
\emph on
\color red

\begin_inset Quotes xld
\end_inset


\emph default
Q:
\backslash
gamY
\backslash
gamY.exe
\begin_inset Quotes xrd
\end_inset


\color inherit
 w
\color black
ith 
\begin_inset Quotes xld
\end_inset

gamY.exe
\begin_inset Quotes xrd
\end_inset

 
\color inherit
in the above.
\end_layout

\begin_layout Section
General syntax
\end_layout

\begin_layout Itemize
Nothing is case sensitive, just like in GAMS.
\end_layout

\begin_layout Itemize
All gamY macros start with a "$".
\end_layout

\begin_layout Itemize
'#' is used for all comments instead of '*' or $ONTEXT.
\end_layout

\begin_layout Itemize
Square brackets are preferred for encasing sets, e.g.
 x[t] rather than x(t)
\end_layout

\begin_layout Itemize
Neither comments or macros have be at the beginning of a line (unlike GAMS
 dollar commands and '*' comments)
\end_layout

\begin_layout Itemize
Items can be separated by commas, line breaks, or a mix.
\end_layout

\begin_layout Itemize
gamY macros are processed before anything else in the program.
\end_layout

\begin_layout Itemize
Flow control statements (IF, LOOP, FOR, and FUNCTION) are processed before
 other macros.
\end_layout

\begin_layout Itemize
gamY macros can be nested.
\end_layout

\begin_layout Itemize
Nested flow control macros must be identified with a number, e.g.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
$IF1 <condition>:
\end_layout

\begin_deeper
\begin_layout LyX-Code
$IF2 <condition>: 
\end_layout

\begin_deeper
\begin_layout LyX-Code
...
\end_layout

\end_deeper
\begin_layout LyX-Code
$ENDIF2
\end_layout

\end_deeper
\begin_layout LyX-Code
$ENDIF1 
\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Group
\end_layout

\begin_layout Standard
A gamY group is a data structure containing variables.
 New variables should always be defined using the $GROUP command rather
 than a GAMS 
\emph on
variables
\emph default
 statement.
 The group command bundles together variables so that they can be manipulated
 together more easily, using other gamY macros such as $FIX, $UNFIX, $LOOP,
 $DISPLAY, and even $GROUP itself.
 Variable elements can be selectively included in a group using dollar condition
s.
 Note that conditions ALWAYS need to be enclosed in round brackets.
 Groups can be added together (union operation) or removed (complement operation
) as shown in the examples below.
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 <group name> <groups and/or variables>
\series bold
;
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Subsubsection
Define new variables using the GROUP command
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 group1
\end_layout

\begin_deeper
\begin_layout LyX-Code
var1[t] 
\begin_inset Quotes xld
\end_inset

label for variable 1
\begin_inset Quotes xrd
\end_inset


\end_layout

\begin_layout LyX-Code
var2[a,t] 
\begin_inset Quotes xld
\end_inset

label for variable 2
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Subsubsection
Existing groups or variables can be included in a group
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 group2
\end_layout

\begin_deeper
\begin_layout LyX-Code
group1, var3 
\begin_inset Quotes xld
\end_inset

Label for variable 3
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\color gray
# Commas and line breaks can both be used to separate groups/variables
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Subsubsection
Groups can be re-defined (or modified by including the existing group in
 the definition)
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 group2
\end_layout

\begin_deeper
\begin_layout LyX-Code
group2
\end_layout

\begin_layout LyX-Code
var4 
\begin_inset Quotes xld
\end_inset

Remember labels for new variables!
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\color gray
# Note that sets and labels are ignored for existing variables,
\end_layout

\begin_layout LyX-Code

\color gray
# but are often convenient to keep.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Subsubsection
Variable can be conditionally included using dollar conditions
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 group3
\end_layout

\begin_deeper
\begin_layout LyX-Code
var2[a,t]$(a.val >= 18) 
\begin_inset Quotes xld
\end_inset

label for variable 2
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\color gray
# Note that conditions ALWAYS need to be enclosed in round brackets.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Subsubsection
Group can be defined by 'subtracting' a variable from the the group
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 group4
\end_layout

\begin_deeper
\begin_layout LyX-Code
var2[a,t], -var2[a,t]$(a.val < 18)
\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\color gray
# group4 is identical to group3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Subsubsection
Dollar conditions can also be applied to entire groups
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 group5
\end_layout

\begin_deeper
\begin_layout LyX-Code
group1$(t.val > 2019)
\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\color gray
# Note that all variables in group1 must be defined over t in this case
\end_layout

\end_inset


\end_layout

\begin_layout Section
Block
\end_layout

\begin_layout Standard
A block is a data structure containing equations.
 New equations should always be defined using the $BLOCK command rather
 than a GAMS 
\emph on
EQUATIONS
\emph default
 statement.
 The block command bundles together equations so that they can be manipulated
 together more easily, using other gamY macros such as $LOOP or $MODEL.
 Whenever a gamY block is defined, an equivalent GAMS model is also defined
 and can be used in solve statements (as shown in the example below).
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$BLOCK
\series default
 <block name>
\end_layout

\begin_deeper
\begin_layout LyX-Code
<equation definitions>
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDBLOCK
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$BLOCK
\series default
 MyBlock
\end_layout

\begin_deeper
\begin_layout LyX-Code
eq1[t]..
 v1[t] =E= v2[t];
\end_layout

\begin_layout LyX-Code
eq2[t]..
 v2[t] =E= 1;
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDBLOCK
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
solve MyBlock using CNS;
\end_layout

\end_inset


\end_layout

\begin_layout Section
Model
\end_layout

\begin_layout Standard
The $MODEL command defines a new block data structure by combining existing
 blocks and/or equations.
 By default, blocks cannot be redefined.
 The GAMS options $onMultiR or $onMulti can be used to change this behavior.
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$MODEL
\series default
 <model name> <equations and/or blocks>
\series bold
;
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$MODEL
\series default
 MyNewModel
\end_layout

\begin_deeper
\begin_layout LyX-Code
MyBlock
\end_layout

\begin_layout LyX-Code
eq3
\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
solve MyNewModel using CNS;
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Loop
\end_layout

\begin_layout Standard
The $LOOP command is used to loop over a group or block, repeating an operation
 for each variable in the group or each equation in the block.
\end_layout

\begin_layout Standard
Within the loop, a number of special keywords are automaically replaced
 with fields from the variable or equation.
\end_layout

\begin_layout Standard
Looping over groups and blocks is described separately in the two following
 sections.
\end_layout

\begin_layout Section
Looping over a group (or pgroup)
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$LOOP
\series default
 <group name>:
\end_layout

\begin_deeper
\begin_layout LyX-Code
<content where 
\series bold
{name}
\series default
, 
\series bold
{sets}
\series default
, and 
\series bold
{conditions}
\series default
 are replaced>
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDLOOP
\end_layout

\begin_layout Description

\series bold
{name} 
\series default
is replaced with the name of the variable
\end_layout

\begin_layout Description

\series bold
{sets} 
\series default
is replaced with the sets that the variable is defined over
\end_layout

\begin_layout Description

\series bold
{conditions} 
\series default
is replaced with the dollar-conditions that limits which elements of a variable
 are included in the group being looped over.
 If no dollar-condition applies, it is replaced by (1) (i.e.

\shape italic
 true
\shape default
).
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 G_myGroup:
\end_layout

\begin_deeper
\begin_layout LyX-Code
v1[a,t]$(a.val > 15) 
\begin_inset Quotes xld
\end_inset

Variable defined over age and time
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code

\series bold
$LOOP
\series default
 G_myGroup:
\end_layout

\begin_deeper
\begin_layout LyX-Code
parameter saved_
\series bold
{name}{sets}
\series default
;
\end_layout

\begin_layout LyX-Code
saved_
\series bold
{name}{sets}
\series default
$(
\series bold
{conditions}
\series default
) = 
\series bold
{name}
\series default
.L
\series bold
{sets}
\series default
;
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$EndLoop
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
parameter saved_v1[a,t];
\end_layout

\begin_layout LyX-Code
saved_v1[a,t]$(a.val > 15) = v1.L[a,t];
\end_layout

\end_inset


\end_layout

\begin_layout Section
Looping over a block
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$LOOP 
\series default
<block name>:
\end_layout

\begin_deeper
\begin_layout LyX-Code
<content where 
\series bold
{name}
\series default
, 
\series bold
{sets}
\series default
, 
\series bold
{conditions}
\series default
, 
\series bold
{LHS}
\series default
, and
\series bold
 {RHS}
\series default
 are replaced>
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDLOOP
\end_layout

\begin_layout Description

\series bold
{name} 
\series default
is replaced with the name of the equation.
\end_layout

\begin_layout Description

\series bold
{sets} 
\series default
is replaced with the sets that the equation is defined over.
\end_layout

\begin_layout Description

\series bold
{conditions} 
\series default
is replaced with the dollar-conditions that limits which elements the equation
 is defined for.
 If no dollar-condition applies, it is replaced by (1) (i.e.

\shape italic
 true
\shape default
).
\end_layout

\begin_layout Description

\series bold
{LHS} 
\series default
is replaced with the left hand side of the equation.
\end_layout

\begin_layout Description

\series bold
{RHS} 
\series default
is replaced with the right hand side of the equation.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
$BLOCK 
\series default
MyBlock
\series bold
:
\end_layout

\begin_deeper
\begin_layout LyX-Code
E_eq1[s,t]$(sp[s])..
 v1[s,t] =E= v2[t];
\end_layout

\begin_layout LyX-Code
E_eq2[t]..
 v2[t] =E= 1;
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDBLOCK
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code

\series bold
$LOOP
\series default
 MyBlock:
\end_layout

\begin_deeper
\begin_layout LyX-Code
{name}_terminal{sets}$(tEnd[t] and {conditions}) {LHS} =E= {RHS};
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$EndLoop
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
E_eq1_terminal[s,t]$(tEnd[t] and (sp[s])) v1[s,t] =E= v2[t];
\end_layout

\begin_layout LyX-Code
E_eq2_terminal[t]$(tEnd[t] and (1)) v2[t] =E= 1;
\end_layout

\end_inset


\end_layout

\begin_layout Section
Advanced set manipulation in loops
\end_layout

\begin_layout Standard
A number of advanced options are availiable for modifying the sets or applying
 conditions to sets in loops.
 These are useful for getting around the fact that we cannot for example
 apply a condition 
\emph on
$(t.val > 2019) 
\emph default
to a group where only some of the parameters are defined over t.
\end_layout

\begin_layout Standard
These features are not yet documented.
\end_layout

\begin_layout Section
Fix
\end_layout

\begin_layout Standard
The $FIX macro is used to fix variables or groups of variables.
 By default, the variables are fixed to their current levels.
 Alternatively, a value can be supplied that the variables should be fixed
 to.
 All the same syntax for combining groups and variables that can be used
 with $GROUP macro can also be used with a $FIX macro.
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$FIX
\series default
[(<optional value>)] <groups and/or variables>;
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Subsubsection
Fixing a group to its current level
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 group1 var1[a,t] 
\begin_inset Quotes xld
\end_inset

Variable defined over age and time
\begin_inset Quotes xrd
\end_inset

;
\end_layout

\begin_layout LyX-Code

\series bold
$FIX
\series default
 group1
\series bold
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
var1.fx[a,t] = var1.l[a,t];
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Fixing a group to a specified value
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$FIX
\series default
(100) group1
\series bold
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
var1.fx[a,t] = 100;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The same syntax can be used with a $FIX macro as with a $GROUP macro.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$GROUP 
\series default
group2 var2[t] 
\begin_inset Quotes xld
\end_inset

New variable
\begin_inset Quotes xrd
\end_inset

;
\end_layout

\begin_layout LyX-Code

\series bold
$FIX
\series default
 group1$(a.val > 15)
\series bold
, 
\series default
var2
\series bold
, 
\series default
-var2$(t.val > 2019);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
var1.fx[a,t]$(a.val > 15) = var1.l[a,t];
\end_layout

\begin_layout LyX-Code
v2.fx[t]$(not (t.val > 2019)) = v2.l[t];
\end_layout

\end_inset


\end_layout

\begin_layout Section
Unfix
\end_layout

\begin_layout Standard
The $UNFIX macro is used to set the bounds of variables or groups of variables.
 By default, the lower and upper bounds are set to -inf and +inf respectively.
 Alternatively, a lower and upper bound value can be supplied which the
 variables' bounds should be set to.
 All the same syntax for combining groups and variables that can be used
 with $GROUP macro can also be used with a $UNFIX macro.
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$UNFIX
\series default
[(<lower bound>, <upper bound>)] <groups and/or variables>;
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Subsubsection
Unfixing a group with no bounds
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 group1 var1[a,t] 
\begin_inset Quotes xld
\end_inset

Variable defined over age and time
\begin_inset Quotes xrd
\end_inset

;
\end_layout

\begin_layout LyX-Code

\series bold
$UNFIX
\series default
 group1
\series bold
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
var1.lo[a,t] = -inf;
\end_layout

\begin_layout LyX-Code
var1.up[a,t] = inf;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Subsubsection
Unfix a group with specified bounds
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$UNFIX
\series default
(0, inf) group1
\series bold
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
var1.lo[a,t] = 0;
\end_layout

\begin_layout LyX-Code
var1.up[a,t] = inf;
\end_layout

\end_inset


\end_layout

\begin_layout Section
Display
\end_layout

\begin_layout Standard
The $DISPLAY macro is used to display a group of variables in the listing
 fil (.lst file).
 All the same syntax for combining groups and variables that can be used
 with $GROUP macro can also be used with a $DISPLAY macro.
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$DISPLAY
\series default
 <groups and/or variables>;
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$DISPLAY
\series default
 group1$(2010 < t.val and t.val < 2020
\series bold
);
\end_layout

\end_inset


\end_layout

\begin_layout Section
If
\end_layout

\begin_layout Standard
The $IF macro control which parts of a file is executed.
 Remember that gamY macros are executed before any GAMS code and gamY $IF
 statements therefore cannot use any parameters etc.
 in the condition (regular GAMS if statements can do that).
 The $IF macro is most useful in conjunction with the $SET or $SETGLOBAL
 macros.
 The condition can be be (almost) any statement that can be evaluated by
 Python.
 Nested if statements must be matched by adding a number to the matching
 $IF and $ENDIF macros.
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$IF
\series default
[<id>] <condition>:
\end_layout

\begin_deeper
\begin_layout LyX-Code
<content>
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDIF
\series default
[<id>];
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$IF
\series default
 %i% = 1:
\end_layout

\begin_deeper
\begin_layout LyX-Code
display '1';
\end_layout

\begin_layout LyX-Code
...
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDIF
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Subsubsection
Nested $IF statements
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$IF1
\series default
 %i% = 1:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\series bold
$IF2
\end_layout

\begin_deeper
\begin_layout LyX-Code
...;
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDIF2
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDIF1
\end_layout

\begin_layout LyX-Code

\color gray
# Nested if statements must be matched
\end_layout

\begin_layout LyX-Code

\color gray
# by addding an identifying number to the matching $IF and $ENDIF macros.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Macro variables
\end_layout

\begin_layout Standard
The $SET, $SETLOCAL, and $SETGLOBAL commands from GAMS are also parsed by
 gamY and are used to define macro variables.
 Local macro variables take precedent over global variables, but are not
 remembered between files (using the save/restart feature).
 $SET and $SETLOCAL have identical behavior.
 Any names encased in '%' characters are replaced by gamY if the name is
 defined.
\end_layout

\begin_layout Standard
The $EVAL macros are identical to the $SET macros, except the assigned expressio
n is evaluated before assignment.
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$SET[GLOBAL/LOCAL] 
\series default
<variable name> <value>
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code

\series bold
$EVAL[GLOBAL/LOCAL] 
\series default
<variable name> <expression>
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Subsubsection
Setting and using a macro variable
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$SETGLOBAL 
\series default
terminal_age 100
\end_layout

\begin_layout LyX-Code
sets a 
\begin_inset Quotes xld
\end_inset

Age groups
\begin_inset Quotes xrd
\end_inset

 /0*%terminal_age%/;
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
sets a 
\begin_inset Quotes xld
\end_inset

Age groups
\begin_inset Quotes xrd
\end_inset

 /0*100/;
\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Subsubsection
Using $EVAL to set a macro variable
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$EVAL 
\series default
terminal_age_plus_1 %terminal_age%+1
\end_layout

\begin_layout LyX-Code
set a 
\begin_inset Quotes xld
\end_inset

Age groups
\begin_inset Quotes xrd
\end_inset

 /0*%terminal_age_plus_1%/;
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
set a 
\begin_inset Quotes xld
\end_inset

Age groups
\begin_inset Quotes xrd
\end_inset

 /0*101/;
\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\end_layout

\begin_layout Section
For loops
\end_layout

\begin_layout Standard
The $FOR macro is used to loop over arbitrary iterables that can be evaluated
 by Pyhon.
 Nested for loops must be matched by adding a number to the matching $FOR
 and $ENDFOR macros.
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$FOR
\series default
[<id>]
\series bold
 
\series default
<iterators> 
\series bold
in
\series default
 <iterable>
\series bold
:
\end_layout

\begin_deeper
\begin_layout LyX-Code
<expression>
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDFOR
\series default
[<id>]
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$FOR
\series default
 {parameter}, {value} 
\series bold
in
\series default
 [('a', 1), ('b', 2)]:
\end_layout

\begin_deeper
\begin_layout LyX-Code
{parameter} = {value};
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDFOR
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
a = 1;
\end_layout

\begin_layout LyX-Code
b = 2;
\end_layout

\end_inset


\end_layout

\begin_layout Section
Import
\end_layout

\begin_layout Standard
The $IMPORT macro is equivalent to the the GAMS $INCLUDE command, except
 that the included file is also pre-processed by gamY.
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$IMPORT
\series default
 <file path>
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$IMPORT 
\series default
production.gms
\end_layout

\end_inset


\end_layout

\begin_layout Section
User defined functions
\end_layout

\begin_layout Standard
Users can define their own functions by using the $FUNCTION macro.
 GAMS already allows users to define their own macros, but gamY user functions
 are useful as they allow for functions which utilize other gamY features.
 A function can be used to define other functions, however nested function
 definitions must be matched by adding a number to the matching $FUNCTION
 and $ENDFUNCTION macros.
 
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout Standard
Function definition:
\end_layout

\begin_layout LyX-Code

\series bold
$FUNCTION
\series default
[<id>]
\series bold
 
\series default
<function name>([<argument name>, <...>])
\series bold
:
\end_layout

\begin_deeper
\begin_layout LyX-Code
<expression>
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDFUNCTION
\series default
[<id>]
\end_layout

\begin_layout Standard
Function call:
\end_layout

\begin_layout LyX-Code

\series bold
@
\series default
<function name>([<argument>, <...>]);
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Standard

\series bold
Simple user function
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\color gray
# A regular GAMS macro could have been used instead
\end_layout

\begin_layout LyX-Code

\series bold
$FUNCTION
\series default
 abs({x}):
\end_layout

\begin_deeper
\begin_layout LyX-Code
sqrt(sqr({x}))
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDFOR
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
a[t] = @abs(b[t]);
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
a[t] = sqrt(sqr(b[t]));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Subsubsection
User function using other gamY macros
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\color gray
# Set lower bounds to zero if the variable is not fixed
\end_layout

\begin_layout LyX-Code

\series bold
$FUNCTION
\series default
 zero_bound({group}):
\end_layout

\begin_deeper
\begin_layout LyX-Code

\series bold
$LOOP
\series default
 {group}
\series bold
:
\end_layout

\begin_deeper
\begin_layout LyX-Code
{name}.lo{sets}$({conditions} and {name}.up{sets} <> {name}.lo{sets}) = 0;
  
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDLOOP
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDFUNCTION
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code

\series bold
@
\series default
zero_bound(group1);
\end_layout

\end_inset


\end_layout

\begin_layout Section
Search and replace
\end_layout

\begin_layout Standard
The $REPLACE and $REGEX macros are used to do arbitrary text search and
 replace procedures.
 Optionally, a maximum number of replacements can be supplied.
 The $REGEX macro interprets the <old> string as a regular expression and
 allows for captured groups in the replacement string.
 See 
\begin_inset CommandInset href
LatexCommand href
target "https://docs.python.org/3/library/re.html"

\end_inset

 for details on the regular expression syntax.
\end_layout

\begin_layout Standard
Nested replacements must be matched by adding a number to the matching $REPLACE
 and $REPLACE macros.
 
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$REPLACE
\series default
[<id>]
\series bold
(
\series default
<old>
\series bold
,
\series default
 <new> [
\series bold
,
\series default
count]
\series bold
)
\end_layout

\begin_deeper
\begin_layout LyX-Code
<expression>
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDREPLACE
\series default
[<id>]
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
$REGEX
\series default
[<id>]
\series bold
(
\series default
<old>
\series bold
,
\series default
 <new> [
\series bold
,
\series default
count]
\series bold
)
\end_layout

\begin_deeper
\begin_layout LyX-Code
<expression>
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDREGEX
\series default
[<id>]
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Standard

\series bold
Simple replace
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$REPLCE(
\series default

\begin_inset Quotes xld
\end_inset

x
\begin_inset Quotes xrd
\end_inset

, 
\begin_inset Quotes xld
\end_inset

y
\begin_inset Quotes xrd
\end_inset

)
\end_layout

\begin_deeper
\begin_layout LyX-Code
x[t] = xy[t]
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDREPLACE
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
y[t] = yy[t];
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\series bold
Replace the first occurance only
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$REPLCE(
\series default

\begin_inset Quotes xld
\end_inset

x
\begin_inset Quotes xrd
\end_inset

, 
\begin_inset Quotes xld
\end_inset

y
\begin_inset Quotes xrd
\end_inset

, 1)
\end_layout

\begin_deeper
\begin_layout LyX-Code
x[t] = xy[t]
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDREPLACE
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
y[t] = xy[t];
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\series bold
Replacement with regular expressions
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$REGEX(
\series default

\begin_inset Quotes xld
\end_inset

(
\backslash
w)
\backslash
[
\begin_inset Quotes xrd
\end_inset

, 
\begin_inset Quotes xld
\end_inset


\backslash
g<1>.l[
\begin_inset Quotes xrd
\end_inset

)
\end_layout

\begin_deeper
\begin_layout LyX-Code
x[t] = y[t]
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDREGEX
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
x.l[t] = y.l[t];
\end_layout

\end_inset


\end_layout

\begin_layout Section
Parameter groups
\end_layout

\begin_layout Standard
The $PGROUP macro is used to define and manipulate groups of parameters.
 p-groups are equivalent groups, except they contain parameters instead
 of variables.
 P-groups cannot be mixed with variable groups and they are not supported
 by other gamY macros, except LOOP.
\end_layout

\begin_layout Subsection
Syntax
\end_layout

\begin_layout LyX-Code

\series bold
$PGROUP
\series default
 <pgroup name> <pgroups and/or parameters>;
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Subsubsection
Define new parameters using the PGROUP command
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
$PGROUP
\series default
 pgroup1
\end_layout

\begin_deeper
\begin_layout LyX-Code
par1[t] 
\begin_inset Quotes xld
\end_inset

label for parameter 1
\begin_inset Quotes xrd
\end_inset


\end_layout

\begin_layout LyX-Code
par2[a,t] 
\begin_inset Quotes xld
\end_inset

label for parameter 2
\begin_inset Quotes xrd
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementation notes
\end_layout

\begin_layout Standard
The pre-processor is a prototype and uses 'brute force' regular expressions
 to find and replace the new macros.
 Macros can be nested and are processed inside out (using recursive descent
 parsing) from top to bottom.
 The program should be rewritten using a tokenizer, lexer, and parser to
 allow for unlimited nesting of flow control statements and to make the
 syntax more robust.
 Unittesting is not yet written.
\end_layout

\begin_layout Section
\noindent
Exercise 1 - A small Reform Model 
\end_layout

\begin_layout Subsection
\noindent
The Model 
\end_layout

\begin_layout Standard
\noindent
This exercise shows how to setup and solve a small multisector model for
 a closed economy.
\begin_inset Foot
status open

\begin_layout Plain Layout
The model is taken from an assignment for the course 
\begin_inset Quotes xld
\end_inset

Anvendt økonomisk modellering
\begin_inset Quotes xrd
\end_inset

 (formerly 
\begin_inset Quotes xld
\end_inset

Anvendte Generelle Ligevægtsmodeller
\begin_inset Quotes xrd
\end_inset

).
\end_layout

\end_inset

 There are 5 sectors indexed by 
\begin_inset Formula $j\in\left\{ 1,2,...,5\right\} $
\end_inset

.
 The production of sector 
\begin_inset Formula $j$
\end_inset

 is given by 
\begin_inset Formula $Y_{j}=F_{j}\left(M_{j},L_{j}\right)$
\end_inset

 where 
\begin_inset Formula $M_{j}$
\end_inset

is a material aggregate and 
\begin_inset Formula $L_{j}$
\end_inset

is labor.
 The production function 
\begin_inset Formula $F_{j}\left(\cdot\right)$
\end_inset

 is of the CES type.
 The aggregate 
\begin_inset Formula $M_{j}$
\end_inset

 is made using CES technology with inputs being output from all other sectors
 
\begin_inset Formula $x_{i,j}$
\end_inset

, where 
\begin_inset Formula $i$
\end_inset

 denotes the supplying sector.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
The demand for labor and materials in sector 
\begin_inset Formula $j$
\end_inset

 is given by:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula 
\begin{equation}
\theta_{j}L_{j}=\mu_{j}^{YL}\left(\frac{w}{\theta_{j}p_{j}^{Y}}\right)^{-E_{j}^{Y}}Y_{j}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula 
\begin{equation}
M_{j}=\mu_{j}^{YM}\left(\frac{p_{j}^{M}}{p_{j}^{Y}}\right)^{-E_{j}^{Y}}Y_{j}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
The demand for intermediate goods 
\begin_inset Formula $x_{i,j}$
\end_inset

 is:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula 
\begin{equation}
x_{i,j}=\mu_{i,j}^{x}\left(\frac{p_{i}^{Y}}{p_{j}^{M}}\right)^{-E_{j}^{M}}M_{j}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
Zero-profit conditions are:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula 
\begin{equation}
p_{j}^{M}M_{j}+wL_{j}=p_{j}Y_{j}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula 
\begin{equation}
\sum_{i}p_{i}^{Y}x_{i,j}=p_{j}^{M}M_{j}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
The demand for goods and the consumer's budget constraint are: 
\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula 
\begin{equation}
C_{j}=\gamma_{j}\left(\frac{p_{j}^{Y}}{p_{C}}\right)^{-E_{j}^{C}}\frac{Y^{D}}{p_{C}}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula 
\begin{equation}
\sum_{j}p_{j}^{Y}C_{j}=Y^{D}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
Disposable income is:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula 
\begin{equation}
Y^{D}=wN
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
Finally, there are two equilibrium conditions - one for the goods market
 and one for the labor market - but due to Walras's law we need only one.
 As such, we add the equilibrium condition for the goods market:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula 
\begin{equation}
Y_{j}=\sum_{i}x_{i,j}+C_{j}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
The model consists of equations (1)-(9) with the endogenous variables being
 
\begin_inset Formula $L_{j},M_{j}Y_{j},C_{j},x_{i,j},p_{j}^{Y},p_{j}^{M},w,Y^{D}.$
\end_inset

 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
Initially, use the following parameter values: 
\begin_inset Formula $\theta_{j}=1,E_{j}^{Y}=0.7,E_{j}^{C}=0.5,E_{j}^{M}=0.5.$
\end_inset

 Data for certain variables (
\begin_inset Formula $x_{i,j},L_{j},C_{j}$
\end_inset

) is found in the input/output table IOdata4_2a.gms.
 
\end_layout

\begin_layout Subsection
\noindent
Setting up and solving Model 
\end_layout

\begin_layout Enumerate
\noindent

\series bold
Sets.

\series default
 Before defining any variables or equations we need to define the sets which
 the variables/equations are defined over.
 In this simple model we need only one set as the content of the sets 
\begin_inset Formula $j$
\end_inset

 and 
\begin_inset Formula $i$
\end_inset

 are the same.
 Having created the set 
\begin_inset Formula $j$
\end_inset

 the set 
\begin_inset Formula $i$
\end_inset

 may be constructed using 
\shape italic
alias(j,i)
\shape default
.
 
\end_layout

\begin_layout Enumerate
\noindent

\series bold
Variables.

\series default
 Create 2 groups: One for the endogenous variables and one for the exogenous
 variables and define the relevant variables within the relevant group.
 That is:
\begin_inset Newline newline
\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 group_endo
\end_layout

\begin_deeper
\begin_layout LyX-Code
L[j]      
\begin_inset Quotes xld
\end_inset

Labor input
\begin_inset Quotes xrd
\end_inset


\end_layout

\begin_layout LyX-Code
w         
\begin_inset Quotes xld
\end_inset

wage rate
\begin_inset Quotes xrd
\end_inset


\end_layout

\begin_layout LyX-Code
.
\end_layout

\begin_layout LyX-Code
.
\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 group_exo
\end_layout

\begin_deeper
\begin_layout LyX-Code
theta[j]  
\begin_inset Quotes xld
\end_inset

productivity
\begin_inset Quotes xrd
\end_inset


\end_layout

\begin_layout LyX-Code
pC        
\begin_inset Quotes xld
\end_inset

Price index
\begin_inset Quotes xrd
\end_inset


\end_layout

\begin_layout LyX-Code
.
\end_layout

\begin_layout LyX-Code
.
\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Enumerate
\noindent
\begin_inset Argument 1
status open

\begin_layout Plain Layout
resume
\end_layout

\end_inset


\series bold
Equations.
 
\series default
Write up the equations of the model (i.e.
 equations (1)-(9)).
 These are are contained within a model block - for example: 
\begin_inset Newline newline
\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$BLOCK
\series default
 mSector_model
\end_layout

\begin_deeper
\begin_layout LyX-Code
eq1[j]..
 theta[j] * L[j] =E= muYL[j] ...
 ;
\end_layout

\begin_layout LyX-Code
.
\end_layout

\begin_layout LyX-Code
.
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDBLOCK
\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\noindent
\begin_inset Argument 1
status open

\begin_layout Plain Layout
resume
\end_layout

\end_inset


\series bold
Data and initialization.
 
\series default
Set the values for exogenous parameters and variables regularly as in GAMS.
 Values for endogenous variables which are calibrated should also be set
 here.
 In the current model this involves 
\begin_inset Formula $x_{i,j},L_{j},C_{j}$
\end_inset

.
 In order to match these variables with the correct data from the IO-table
 in IOdata4_2a.gms, use a $FOR loop to loop over the correct set for each
 variable.
 For instance, for 
\begin_inset Formula $C_{j}$
\end_inset

 we need to extract data from the IO-table for sets 
\begin_inset Formula $j=1,2,...,5$
\end_inset

 while keeping the second dimension (the output dimension of the table)
 constant at 
\begin_inset Quotes xld
\end_inset

private consumption
\begin_inset Quotes xrd
\end_inset

.
 Having loaded the data only initialization remains.
 Set reasonable starting values for the endogenous variables (in the calibration
 - see the next step) to both improve the starting point of the solver (thus
 increasing the likelyhood that the model is solved) and to avoid 
\begin_inset Quotes xld
\end_inset

Division-by-zero
\begin_inset Quotes xrd
\end_inset

 errors.
 
\end_layout

\begin_layout Enumerate
\noindent
\begin_inset Argument 1
status open

\begin_layout Plain Layout
resume
\end_layout

\end_inset

 
\series bold
Calibration.

\series default
 Calibration is done a bit differently with gamY.
 Instead of calibrating 
\begin_inset Quotes xld
\end_inset

by hand
\begin_inset Quotes xrd
\end_inset

, we use the numerical solver to calibrate for us.
 For example, to calibrate the model to produce certain consumption levels
 
\begin_inset Formula $C_{j=1}=200,C_{j=2}=100$
\end_inset

 we would usually insert these values into eq.
 (6), and this would exactly provide us with the parameters 
\begin_inset Formula $\gamma_{j=1},\gamma_{j=2}$
\end_inset

 that makes the model produce the desired, observed consumption levels.
 A similar procedure in gamY is done by setting 
\begin_inset Formula $C_{j=1}=200,C_{j=2}=100$
\end_inset

 in the 
\begin_inset Quotes xld
\end_inset

Data and initialization
\series bold

\begin_inset Quotes xrd
\end_inset


\series default
-section and endogenizing 
\begin_inset Formula $\gamma_{j=1},\gamma_{j=2}$
\end_inset

 and solving the corresponding model using GAMS (i.e.
 and endo-exo procedure).
 In practice this involves using the equation and variable blocks to produce
 a calibration model:
\begin_inset Newline newline
\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
$GROUP
\series default
 group_calib_endo
\end_layout

\begin_deeper
\begin_layout LyX-Code
group_endo
\end_layout

\begin_layout LyX-Code
-C[j]
\end_layout

\begin_layout LyX-Code
gamma[j]
\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

This procedure takes the existing group of endogenous variables, subtracts
 
\begin_inset Formula $C_{j}$
\end_inset

 (making it exogenous when solving), and adds 
\begin_inset Formula $\gamma_{j}$
\end_inset

 (making it endogenous when solving).
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
When during this kind of calibration you will often run into pivot-errors
 (
\begin_inset Quotes xld
\end_inset

Pivot too small
\begin_inset Quotes xrd
\end_inset

).
 A common source for this error is that all sides of an equation are entirely
 exogenized, thus rendering gams unable to solve the equation (even if it
 is satisfied by default).
 Example: Image a model equation stating that aggregate consumption equals
 the sum of components 
\begin_inset Formula $C=\sum_{j}C_{j}$
\end_inset

.
 Assume that aggregate consumption is always exogenous at a level of 1000.
 In the calibration we then proceed to exogenise 
\begin_inset Formula $C_{j}$
\end_inset

 and endogenise 
\begin_inset Formula $\gamma_{j}$
\end_inset

.
 This is likely to generate a pivot error as both sides of the equation
 
\begin_inset Formula $C=\sum_{j}C_{j}$
\end_inset

 are fixed.
 The solution usually is to leave one group endogenous (i.e.
 exogenise 
\begin_inset Formula $C_{j}$
\end_inset

 for 
\begin_inset Formula $j\neq1$
\end_inset

) so as to leave the equation solvable.
 Of course another model variable must then be endogenized to leave the
 model square.
 
\end_layout

\end_inset

 Note that it might also be necessary to add new equations in the calibration-mo
del.
 For instance, it is standard to assume that the parameters 
\begin_inset Formula $\gamma_{j}$
\end_inset

 sum to one (thus making them shares).
 To account for this when solving the model using GAMS we add the following
 equation:
\begin_inset Newline newline
\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$BLOCK
\series default
 calibration_block
\end_layout

\begin_deeper
\begin_layout LyX-Code
eq1_calibration[j]..
 sum(j,gamma[j]) =E= 1 ;
\end_layout

\end_deeper
\begin_layout LyX-Code

\series bold
$ENDBLOCK
\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

This new calibration-block is then combined with the existing block of equations
 by using the $MODEL command:
\begin_inset Newline newline
\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\series bold
$MODEL
\series default
 calibration_model
\end_layout

\begin_deeper
\begin_layout LyX-Code
mSector_model
\end_layout

\begin_layout LyX-Code
calibration_block
\end_layout

\end_deeper
\begin_layout LyX-Code
;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
$FIX All; $UNFIX group_calib_endo; 
\end_layout

\begin_layout LyX-Code
solve Calib_model using CNS;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

The last two lines first fixes all variables, endogenizes the variables
 of the calibration model, and solves the calibration model.
 
\end_layout

\begin_layout Enumerate
\noindent
\begin_inset Argument 1
status open

\begin_layout Plain Layout
resume
\end_layout

\end_inset

 
\series bold
Solving.

\series default
 If the calibration was solved successfully, proceed and solve the actual
 model, composed of block of equations 
\series bold
mSector_model
\series default
 and endogenous variables 
\series bold
group_endo
\series default
.
 Check that the results of solving the calibration model and the actual
 model are the same.
 
\end_layout

\begin_layout Standard
\noindent
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection
\noindent
Shocks
\end_layout

\begin_layout Enumerate
\noindent
Increase the productivity (
\begin_inset Formula $\theta)$
\end_inset

 of sector 1 and 2 by 10%.
 
\end_layout

\begin_layout Enumerate
Change the elasticity of substitution of consumption from 
\begin_inset Formula $0.5$
\end_inset

 to 
\begin_inset Formula $2$
\end_inset

 (i.e.
 set 
\begin_inset Formula $E_{j}^{C}=2$
\end_inset

).
 Increase again the productivity of sector 1 and 2 by 10%.
 
\end_layout

\begin_layout Enumerate
Let the productivity of sector 2 decline by 10%.
 How much does the productivity in sector 1 need to increase to cause an
 increase in wages of 3%? 
\end_layout

\end_body
\end_document
