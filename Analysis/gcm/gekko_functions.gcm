// =====================================================================================================================
// FUNCTIONS and FUNCTIONS
// =====================================================================================================================
// ---------------------------------------------------------------------------------------------------------------------
// Globals
// ---------------------------------------------------------------------------------------------------------------------
GLOBAL %python; GLOBAL %gamY; GLOBAL %GAMS; GLOBAL %GAMSDIR;;
%python = %GAMSDIR + '\GMSPython\python.exe';
%gamY = %python + ' gamY\gamY.pY ';
%GAMS = %GAMSDIR + '\gams.exe ';

// python scripts
GLOBAL %gekko_endo_exo;
%gekko_endo_exo = %python + ' gamY\gekko_endo_exo.pY ' + %GAMSDIR;

OPTION gams exe folder '{%GAMSDIR}';


// ---------------------------------------------------------------------------------------------------------------------
// Default sets
// ---------------------------------------------------------------------------------------------------------------------
GLOBAL fold; GLOBAL unfold;
PROCEDURE fold;
	global:#default.#a_ = ('tot',);
	global:#default.#a  = ('10', '20', '30', '40', '50', '60', '70', '80', '90', '100');

	global:#default.#c_ = ('cTot',);
	global:#default.#c  = ('cBil', 'cEne', 'cVar', 'cBol', 'cTje', 'cTur');

	global:#default.#x_ = ('xTot',);
	global:#default.#x  = ('xEne', 'xVar', 'xSoe', 'xTje', 'xTur');

	global:#default.#g_ = ('gTot',);
	global:#default.#g  = ('g',);

	global:#default.#s_ = ('tot',);
	global:#default.#sp = ('tje', 'fre', 'byg', 'soe', 'bol', 'lan', 'ene', 'udv');
	global:#default.#s  = ('tje', 'fre', 'byg', 'soe', 'bol', 'lan', 'ene', 'udv', 'off');
	global:#default.#r_ = ('rTot',);
	global:#default.#r  = global:#default.#s;

	global:#default.#i_ = ('iTot',);
	global:#default.#i  = ('iM', 'iB', 'iL');

	global:#default.#k_ = ('iM', 'iB');
	global:#default.#k  = ('iM', 'iB');

  global:#default.#portf = ('Net',);
  global:#default.#portf_ = ('Net',);

  global:#default.#scen_ = ('GovSpending', 'IntRate', 'ForeignDemand');
END;
PROCEDURE unfold;
	fold;
	global:#default.#a_ = global:#default.#a;
	global:#default.#c_ = global:#default.#c;
	global:#default.#x_ = global:#default.#x;
	global:#default.#g_ = global:#default.#g;
	global:#default.#s_ = global:#default.#s;
	global:#default.#r_ = global:#default.#s;
	global:#default.#i_ = global:#default.#i;
	global:#default.#k_ = global:#default.#k;
  global:#default.#portf = #portf;
  global:#default.#portf_ = #portf_;
END;
global:#default = map(); fold;

PROCEDURE default name %set, list #elements;
	global:#default.{%set} = #elements;
END;


// ---------------------------------------------------------------------------------------------------------------------
// Read procedures from other files
// ---------------------------------------------------------------------------------------------------------------------
// GLOBAL report_baseline; GLOBAL report_shock; 
// RUN 'Analysis\report\report.gcm';

// GLOBAL shock_all; GLOBAL shock; 
// RUN 'Analysis\report\shock.gcm';

// GLOBAL test_homogeneity;
// RUN 'Analysis\homogeneity_test.gcm';

// GLOBAL calibration_report;
// RUN 'Analysis\report\calibration_report.gcm';


// ---------------------------------------------------------------------------------------------------------------------
// Other procedures
// ---------------------------------------------------------------------------------------------------------------------
//Return series rotated on first axis and limited to the current first period
FUNCTION series a(name s);
  return rotate({s}, 1);
END;
// plot <0u 100u> a(qC_a)[2010];

// Plot age distributions
PROCEDURE plot_a name s;
  #t = ('{currentPerStart()}', '{currentPerEnd()}');
  plot <0u 100u> a({s})[#t];
END;
PROCEDURE plot_a series s1;
  #t = (currentPerStart().val(), currentPerEnd().val()).unique();
  plot <0u 100u> rotate(s1, 1)[#t];
END;
PROCEDURE plot_a series s1, series s2;
  #t = (currentPerStart().val(),).unique();
  plot <0u 100u> rotate(s1, 1)[#t], rotate(s2, 1)[#t];
END;
PROCEDURE plot_a series s1, series s2, series s3;
  #t = (currentPerStart().val(),).unique();
  plot <0u 100u> rotate(s1, 1)[#t], rotate(s2, 1)[#t], rotate(s3, 1)[#t];
END;
PROCEDURE plot_a series s1, series s2, series s3, series s4;
  #t = (currentPerStart().val(),).unique();
  plot <0u 100u> rotate(s1, 1)[#t], rotate(s2, 1)[#t], rotate(s3, 1)[#t], rotate(s4, 1)[#t];
END;

PROCEDURE readx name %gdx_name;
	read <gdx> 'Model\Gdx\' + string(%gdx_name);
END;
PROCEDURE readx;
  read <gdx> 'Model\Gdx\dynamic_calibration';
END;

PROCEDURE ADAMnavne;
  global:#alias = #(listfile 'Analysis\ADAM2MAKRO.lst');
END;


// ---------------------------------------------------------------------------------------------------------------------
// gamY procedures
// ---------------------------------------------------------------------------------------------------------------------
// Call gamY gekko_endo_exo script and run sim.gms using gamY 
// simx 'dynamic_calibration' 'Output\MyExperiment' 2020 2025 0;
GLOBAL simx;
PROCEDURE simx string %output_path, val %announcement_year, val %tax_reaction_year, val %g_reaction_year;
	WRITE <gdx> 'Model\Gdx\sim_input.gdx';
	SYS '{%gekko_endo_exo} Model\Gdx\sim_input.gdx';
	SYS '{%gamY} Model\sim.gms gams={%GAMS} r=Savepoints\model --announce={%announcement_year} --output_path={%output_path} --tax_reaction={%tax_reaction_year} --g_reaction={%g_reaction_year}';
END;
PROCEDURE simx string %output_path, val %announcement_year;
  simx %output_path %announcement_year 0 0;
END;


// Transform Excel work sheet into Gekko code to perform endo exo operations and change variable levels.
// excel_endo_exo('MAKRO_Excel_interface.xlsx', 'Output\include_endo_exo.gcm');
GLOBAL excel_endo_exo;
PROCEDURE excel_endo_exo string %workbook_path, string %output_path;
  SYS 'if not exist ' + %output_path + ' copy nul ' +  %output_path;
  SYS '{global:%python} gamY\excel_endo_exo.pY ' + %workbook_path + ' ' + %output_path;
  RUN %output_path;
END;


// ---------------------------------------------------------------------------------------------------------------------
// gamY functions
// ---------------------------------------------------------------------------------------------------------------------
// Call gamY with any command line parameters
GLOBAL gamY;
FUNCTION void gamY(string %parameters);
	SYS %gamY + %parameters;
END;

